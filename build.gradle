plugins {
	id 'fabric-loom' version '0.2.5-DEV'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	
}

repositories {
	mavenLocal()
}
dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	loom.debof(implementation( "net.fabricmc:fabric-loader:${project.loader_version}"))

	// Fabric API. This is technically optional, but you probably want it anyway.
	loom.debof(compile("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"))

	loom.debof(implementation("io.github.prospector.modmenu:ModMenu:+"))
	include("io.github.prospector.modmenu:ModMenu:+")
	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

remapJar {
	doLast {
		// unzip remapped jar for easy debugging
		def archiveFilePath = archiveFile.get().asFile.path
		def extractFolder = new File(archiveFile.get().asFile.parentFile, project.name)
		extractFolder.deleteDir()
		logger.lifecycle("extracting jar $archiveFilePath into $extractFolder")
		def result = exec {
			commandLine(
					"unzip",
					"-o",
					archiveFilePath,
					"-d",
					extractFolder.path
			)
		}
		logger.lifecycle("result: $result")
	}
}
processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
